# Generated by Django 5.1.1 on 2024-11-08 20:23

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=350, unique=True)),
                ('acron', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Investigator',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Measures',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('measure', models.FileField(upload_to='measures/')),
            ],
        ),
        migrations.CreateModel(
            name='Resources',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=50)),
                ('resource', models.ImageField(blank='', default='', upload_to='resources/')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('date', models.DateField(auto_created=True, default='2020-01-01')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100, unique=True)),
                ('acron', models.CharField(max_length=50)),
                ('results', models.TextField(default='Still no results')),
                ('description', models.TextField(default='Missing description')),
                ('inv_area', models.CharField(max_length=100)),
                ('princ_img', models.ImageField(blank='', default='', upload_to='princ_img/')),
                ('clients', models.ManyToManyField(related_name='clients', to='SIAM.entity')),
                ('entitys', models.ManyToManyField(related_name='entitys', to='SIAM.entity')),
                ('financed', models.ForeignKey(default='0', on_delete=django.db.models.deletion.CASCADE, related_name='financed', to='SIAM.entity')),
                ('investigators', models.ManyToManyField(related_name='investigatorlist', to='SIAM.investigator')),
                ('leed_entity', models.ForeignKey(default='0', on_delete=django.db.models.deletion.CASCADE, related_name='leed_entity', to='SIAM.entity')),
                ('measures', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='measures', to='SIAM.measures')),
                ('project_boss', models.ForeignKey(default='0', on_delete=django.db.models.deletion.CASCADE, related_name='project_boss', to='SIAM.investigator')),
                ('tecnic_boss', models.ForeignKey(default='0', on_delete=django.db.models.deletion.CASCADE, related_name='tecnic_boss', to='SIAM.investigator')),
                ('resource', models.ManyToManyField(related_name='resources', to='SIAM.resources')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('normal', 'Normal'), ('staff', 'Staff'), ('admin', 'Admin')], default='normal', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
